# -*- coding: utf-8 -*-
"""Task 2(Transform).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Enjpf9ZufZydEBNMhvJ8fPRCJz__edL4
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('/content/air_pollution_china.csv')

def handle_null_values(data):
  # Total and percentage of missing values
  missing = data.isnull().sum()
  # print(missing)
  missing_percent = (missing / len(data)) * 100
  print("Missing values percent in each column",missing_percent)
  # Dataframe with missing values
  data = pd.DataFrame({'Missing Values': missing, 'Percentage': missing_percent})
  data[data['Missing Values'] > 0].sort_values(by='Percentage', ascending=False)
  print("Completed handling missing values!!")

def handle_duplicates(data):
  # Count total duplicate rows
  duplicate_rows = data[data.duplicated()]
  print(f"Total duplicate rows: {duplicate_rows.shape[0]}")
  data = data.drop_duplicates()
  # Optional: Reset index
  data.reset_index(drop=True, inplace=True)
  print("Completed Handling Duplicates!!")
  print(f"After cleaning: {data.duplicated().sum()} duplicates remaining.")

def handle_inconsistent_data(data):
  # Check for inconsistent data
  # Convert object columns to string type
  data['Weather Condition'] = data['Weather Condition'].astype('string')
  data['Day of Week'] = data['Day of Week'].astype('string')
  data['Season'] = data['Season'].astype('string')
  data['City'] = data['City'].astype('string')
  print("Completed handling inconsistent data!!")

handle_null_values(data)
handle_duplicates(data)
handle_inconsistent_data(data)

from sklearn.preprocessing import PowerTransformer

def normalize_data(data):
  # Normalize the data
  cols_to_normalize = ['PM2.5 (µg/m³)', 'PM10 (µg/m³)', 'NO2 (µg/m³)', 'SO2 (µg/m³)', 'CO (mg/m³)', 'O3 (µg/m³)']

  scaler = PowerTransformer(method='yeo-johnson')
  for col in cols_to_normalize:
      data[col + '_Power'] = scaler.fit_transform(data[[col]])
  print("Completed normalization!!")

normalize_data(data)
print(data.shape)

data['Is_Weekend'] = data['Day of Week'].isin(['Saturday', 'Sunday']).astype(int)
print("Added Is_Weekend column!!")

def time_of_day(hour):
    if 5 <= hour < 12:
        return 'Morning'
    elif 12 <= hour < 17:
        return 'Afternoon'
    elif 17 <= hour < 21:
        return 'Evening'
    else:
        return 'Night'

data['Time_of_Day'] = data['Hour'].apply(time_of_day)
print("Added Time_of_Day column!!")

def wind_dir_label(degree):
    dirs = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW']
    ix = round(degree / 45) % 8
    return dirs[ix]

data['Wind_Direction_Label'] = data['Wind Direction (°)'].apply(wind_dir_label)
print("Added Wind_Direction_Label column!!")

print("The Final shape of dataset is:",data.shape)

# Save the transformed DataFrame to a new CSV file
data.to_csv('processed.csv', index=False)

